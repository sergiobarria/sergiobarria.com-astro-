---
import { type CollectionEntry, getCollection } from 'astro:content';
import clsx from 'clsx';
import { format } from 'date-fns';
import readingTime from 'reading-time';

import MainLayout from '~/layouts/MainLayout.astro';
import BackLink from '~/shared/components/BackLink.astro';
import Image from '~/shared/components/svelte/Image.svelte';
import TOC from '~/shared/components/svelte/TOC.svelte';
import ViewsCounter from '~/shared/components/svelte/ViewsCounter.svelte';

interface Props {
	entry: CollectionEntry<'blog'>;
}

export const prerender = true;
export async function getStaticPaths() {
	const blogEntries = await getCollection('blog');

	return blogEntries.map((entry) => ({
		params: { slug: entry.slug },
		props: { entry },
	}));
}

const { entry } = Astro.props as Props;
const { Content, headings } = await entry.render();
const { slug, data } = entry;

const readTime = readingTime(entry.body);
const formattedDate = format(new Date(data.publishedDate), 'MMMM dd, yyyy');
---

<MainLayout>
	<!-- <pre>{JSON.stringify(entry, null, 2)}</pre> -->
	<div class="xl:relative">
		<div class="mx-auto max-w-2xl">
			<BackLink href="/blog" />

			<!-- Post Content -->
			<article>
				<header class="flex flex-col mb-6">
					<h1
						class={clsx(
							'my-6 text-4xl font-bold tracking-tight text-zin-800',
							'dark:text-zinc-100 sm:text-5xl'
						)}
					>
						{data.title}
					</h1>
					<time
						datetime={data.publishedDate}
						class="order-first flex items-center text-base text-zinc-400 dark:text-zinc-500"
					>
						<span class="h-4 w-0.5 rounded-full bg-zinc-200 dark:bg-zinc-500"></span>
						<span class="ml-3">{formattedDate}</span>
					</time>

					<!-- Cover Image -->
					<Image src={data?.coverImage} alt={data?.title} styles="rounded-2xl" />

					<!-- Post Meta -->
					<div class="flex items-center gap-3 bg-zinc-200 dark:bg-zinc-700 p-3 my-3 rounded-2xl">
						<p class="flex items-center pr-3 border-r border-zinc-400 dark:border-zinc-500 gap-2">
							<svg
								xmlns="http://www.w3.org/2000/svg"
								fill="none"
								viewBox="0 0 24 24"
								stroke-width="1.5"
								stroke="currentColor"
								class="w-4 h-4"
							>
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z"></path>
							</svg>

							<!-- <span>{readingTime} min read</span> -->
							<span class="text-sm">{readTime?.text}</span>
						</p>
						<p class="flex items-center gap-2">
							<svg
								xmlns="http://www.w3.org/2000/svg"
								fill="none"
								viewBox="0 0 24 24"
								stroke-width="1.5"
								stroke="currentColor"
								class="w-4 h-4"
							>
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									d="M2.036 12.322a1.012 1.012 0 010-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178z"
								></path>
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
							</svg>

							<ViewsCounter client:load slug={slug as string} />
						</p>
					</div>
				</header>

				<!-- Post Content -->
				<TOC {headings} />
				<div class="prose dark:prose-invert">
					<Content />
				</div>
			</article>
		</div>
	</div>
</MainLayout>
