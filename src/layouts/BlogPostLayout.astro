---
import clsx from 'clsx';
import type { Meta, Props as SeoProps } from 'astro-seo';
import type { MarkdownHeading } from 'astro';
import { format } from 'date-fns';
import { CalendarIcon, ClockIcon, EyeOpenIcon } from '@radix-ui/react-icons';

import BaseLayout from '~/layouts/BaseLayout.astro';
import { CloudinaryImage, ViewCounter } from '~/shared/components/jsx';
import type { PostFrontmatter } from '~/pages/blog/_utils';

import site from '../../site.json';

interface Props {
	slug?: string;
	frontmatter?: PostFrontmatter;
	headings?: MarkdownHeading[];
}

const pathname = new URL(Astro.request.url).pathname;

// const {
// 	frontmatter: { title, coverImage, summary, minutesRead, publishDate, keywords },
// 	slug,
// 	headings,
// } = Astro.props as Props;
// const formattedDate = format(new Date(publishDate), 'MMM dd, yyyy');

// const CLOUDINARY_USER = import.meta.env.PUBLIC_CLOUDINARY_ID;

// const postKeywords = keywords ?? undefined;

// const metadata: SeoProps = {
// 	title: 'Blog | Sergio Barria',
// 	canonical: 'https://sergiobarria.com/blog',
// 	openGraph: {
// 		basic: {
// 			title: title,
// 			url: `https://sergiobarria.com/blog/${slug}`,
// 			image: site.openGraph.images[0].url,
// 			type: 'website',
// 		},
// 		article: {
// 			authors: [site.author],
// 			publishedTime: publishDate.toString(),
// 			modifiedTime: publishDate.toString(), // TODO: add last modified date
// 			section: 'Blog',
// 			tags: [], // TODO: add tags
// 		},
// 		image: {
// 			alt: title,
// 			url: `https://res.cloudinary.com/${CLOUDINARY_USER}/image/upload/r_20/v1/sergiobarria/banners/${coverImage}`,
// 			width: 1200,
// 			height: 630,
// 		},
// 	},
// 	extend: {
// 		meta: [
// 			{
// 				...((postKeywords && {
// 					name: 'keywords',
// 					content: postKeywords?.replace(/,/g, ', '),
// 				}) as any),
// 			},
// 		] as Partial<Meta>[],
// 	},
// };
---

<BaseLayout>
	<slot />
	<!-- <div class="container">
		<section class="post">
			<div>
				<h1 class="text-center text-gradient">{title}</h1>
				<div class="mb-6">
					<CloudinaryImage
						publicId={`sergiobarria/banners/${coverImage}`}
						alt={title}
						radius={20}
					/>
				</div>
			</div>
			<div class="p-4 mb-3 rounded-lg bg-surface-four">
				<p class="mb-2">
					<span class="font-semibold">Summary:</span>
					<span class="font-serif italic">â†¬ {summary}</span>
				</p>
				<div class="flex items-center gap-3 text-font-two">
					<p class="flex items-center pr-3 border-r gap-2">
						<CalendarIcon width={18} height={18} />
						<span>{formattedDate}</span>
					</p>
					<p class="flex items-center pr-3 border-r gap-2">
						<ClockIcon width={18} height={18} />
						<span>{minutesRead}</span>
					</p>
					<p class="flex items-center gap-2">
						<EyeOpenIcon width={18} height={18} />
						<ViewCounter client:load slug={slug as string} />
					</p>
				</div>
			</div>
		</section>
		<hr class="my-3" />
		<!-- Content
		<div class="grid grid-cols-1 md:grid-cols-[auto,250px]">
			<article id="content" class="custom-prose">
				<slot />
			</article>
			<aside id="toc" class="relative hidden mt-8 md:block">
				<div class="sticky top-36">
					<h3>Table of Contents</h3>
					<div class="mt-3 space-y-1">
						{
							headings.map((heading) => (
								<a
									href={`#${heading.slug}`}
									data-heading={heading.slug}
									class={clsx('block text-sm opacity-70', {
										'hover:opacity-100': !pathname.includes(heading.slug),
									})}
								>
									{heading.text}
								</a>
							))
						}
					</div>
				</div>
			</aside>
		</div>
	</div> -->
</BaseLayout>

<!-- <script is:inline define:vars={{ headings }}>
	const allHeadings = headings.map((heading) => document.querySelector(`#${heading.slug}`));
	const tocLinks = document.querySelectorAll('#toc a');

	const options = {
		root: null,
		rootMargin: '-150px',
		threshold: 0.5,
	};

	// TODO: improve this functionality
	// Use IntersectionObserver to add active class to TOC links
	const observer = new IntersectionObserver((entries) => {
		entries.forEach((entry) => {
			const id = entry.target.getAttribute('id');
			const link = document.querySelector(`#toc a[data-heading="${id}"]`);

			if (entry.isIntersecting) {
				link.classList.add('text-font-one');
				link.classList.add('font-semibold');
				link.classList.add('opacity-100');
			} else {
				link.classList.remove('text-font-one');
				link.classList.remove('font-semibold');
				link.classList.remove('opacity-100');
			}
		});
	}, options);

	allHeadings.forEach((heading) => {
		observer.observe(heading);
	});
</script> -->
